#!/usr/bin/env bash
# Helper script for formatting source code in this repo.
set -euf

is_alias="${GIT_PREFIX+y}"
pwd="${GIT_PREFIX:-$(pwd)}"

haskell_fmt_cmd=("brittany" "--write-mode" "inplace")
haskell_files=()

git_since=""
untracked_changes=()

function usage () {
  echo
  if [ "$is_alias" == "y" ] ; then
    echo "Usage: git fmt [-h|--help] [--since <commit|branch|HEAD>] [<files..>]"
  else
    echo "Usage: $0 [-h|--help] [--since <commit|branch|HEAD>] [<files..>]"
  fi
  echo
  echo "Runs formatter on specified files."
  echo
  echo "If no arguments are given, --since HEAD is assumed, which just formats"
  echo "files modified since the most recent commit."
  echo
  echo "Modified files whose changes aren't tracked will not be formatted,"
  echo "unless explicitly specified. 'git add' your files before running this."
  echo
  echo "Arguments:"
  echo
  echo "  -h. --help          Show this help menu."
  echo "  --since <commit>    Format all files modified since <commit>. Can"
  echo "                      also be a branch name or HEAD."
  echo
  echo "But if you just really want to just format all files in this repo:"
  echo
  echo "    find . -name '*.hs' -print0 | xargs -0 brittany --write-mode=inplace"
}

cd "$(git rev-parse --show-toplevel)"

if [ $# -gt 0 ]; then
  while [ $# -gt 0 ] ; do
    case "$1" in
      "-h" | "--help" )
        usage
        exit 0
        ;;
      "--since")
        shift
        git_since="$1"
        :
        ;;
      *".hs")
        haskell_files+=("$pwd/$1")
        ;;
      -* )
        echo "Warn: unknown argument: $1. Ignoring."
        ;;
      *)
        echo "Warn: unknown file type: $1. Refusing to format."
        ;;
    esac
    shift
  done
else
  git_since="HEAD"
fi

if [ -n "$git_since" ] ; then
  while read -r file ; do
    case "$file" in
      *".hs")
        if ! git status --porcelain "$file" | awk '/^\?\?|^.M/ { exit 1 }' ; then
          echo "Warn: '$file' has untracked changes, so it will not be formatted."
          untracked_changes+=("$file")
          :
        else
          haskell_files+=("$file")
        fi
        ;;
    esac
  done < <(git diff "$git_since" --name-only)
fi

if [ "${#untracked_changes[@]}" -gt 0 ] ; then
  echo
  echo "To format files with untracked changes, git add them:"
  echo
  echo "    git add " "${untracked_changes[@]}"
fi

if [ "${#haskell_files[@]}" -eq 0 ] ; then
  echo
  echo "Nothing to format."
fi

if ! which brittany >/dev/null 2>/dev/null ; then
  echo
  echo "Cannot find brittany on PATH."
  echo
  echo "Please install with:"
  echo
  echo "    stack install brittany"
  exit 1
fi

for file in "${haskell_files[@]}" ; do
  echo -n "Formatting $file ... "
  "${haskell_fmt_cmd[@]}" "$file"
  echo "Formatted."
done
