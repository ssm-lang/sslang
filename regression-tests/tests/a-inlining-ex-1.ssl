/*
NOTE:
This file starts with the letter a so it is easy to find within the regression tests folder during development.
We should rename this file without the "a-" before opening a PR for review.
{-
  stack build
  cd regression-tests
  ./runtests.sh -k tests/a-inlining-ex-1.ssl
  stack exec sslc -- --dump-ir-typed tests/a-inlining-ex-1.ssl
  stack exec sslc -- --dump-ir-lifted tests/a-inlining-ex-1.ssl
  stack exec sslc -- tests/a-inlining-ex-1.ssl

CORRECT OUTPUT
  UnexpectedError (ErrorMsg "\"
  [\\\"START topdef VarId main has OccInfo: \\\\\\\"fromList 
  [(VarId cin,Dead),
  (VarId cout,Dead),
  (VarId q,OnceSafe),
  (VarId r,OnceSafe),
  (VarId y,Dead)]\\\\\\\" END\\\",

  \\\"START topdef VarId f has OccInfo: \\\\\\\"fromList [
    (VarId cin,Dead),
    (VarId cout,Dead),
    (VarId q,OnceSafe),
    (VarId r,OnceSafe),
    (VarId y,OnceSafe)]\\\\\\\" END\\\"]\"")
-}
*/

/*

Example: r and q are oncesafe.
Input:
main = 
  let q = 5
  IN
  let r = q + 1 
  IN 
  r

Expected Output:
main = 
  5 + 1

*/

// print digit; account for ascii offset

putd cout_ c =
  after 1, cout_ <- (c + 48)
  wait cout_


main cin cout = 
  let q = 5
  let r = q + 1 
  putd cout r
  // we need simplExpr on App
//  putd cout r // IR node is let _ = (App (App putd "cout") (r))

  

/*
main has arity 2, we know we only care about the 3rd lambda and onward
ON top level functions: skip all starting lambdas until first body
("main", lambda cin (lambda cout body))
("main", (I.Lambda (Just "cin") (I.Lambda (Just cout) b t2)  t) )
where body is "  let q = 5
                 let r = q + 1 
                 r"

*/


