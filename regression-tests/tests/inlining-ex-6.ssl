// testing inlining of scrutinees

fib n = n

makeColor c = RGB c c c 

type RGB2
    RGB2 Int Int Int
    Black2

type RGB
    RGB Int Int Int
    Black

main cin cout = 
    let a = makeColor 4       // this scrutinee WILL NOT be inlined (it fails checkPure)
    let x = RGB (fib 45) 5 5  // this scrutinee will NOT be inlined (it fails checkPure)
    let v = 5                 // this scrutinee will be inlined, 
                              // and then the entire match expression will be eliminated!

  
    let z = match x
              RGB r g b =  g + 48
              _ = 68
    
    let q = match a 
              RGB r1 g1 b1 = r1 + r1 + 48
              _ = 67
              
    let w = match v
              5 = 65
              _ = 66
    after 1, cout <- z
    wait cout
    after 1, cout <- 10
    wait cout 
    after 1, cout <- q
    wait cout
    after 1, cout <- 10
    wait cout 
    after 1, cout <- w
    wait cout
    after 1, cout <- 10
    wait cout 


/* Expected Output:
type RGB2 
  RGB2 Int32 Int32 Int32
  Black2 


type RGB 
  RGB Int32 Int32 Int32
  Black 


__RGB2
    (__arg0: Int32)
    (__arg1: Int32)
    (__arg2: Int32): (Int32 -> (Int32 -> (Int32 -> RGB2))) =
  %do
    %do
      %do
        RGB2 (%dup __arg0) (%dup __arg1) (%dup __arg2)
      %dropping __arg2
    %dropping __arg1
  %dropping __arg0

__RGB
    (__arg0: Int32)
    (__arg1: Int32)
    (__arg2: Int32): (Int32 -> (Int32 -> (Int32 -> RGB))) =
  %do
    %do
      %do
        RGB (%dup __arg0) (%dup __arg1) (%dup __arg2)
      %dropping __arg2
    %dropping __arg1
  %dropping __arg0

fib (n: 't122): ('t122 -> 't122) = %do { %dup n } %dropping n

makeColor (c: Int32): (Int32 -> RGB) =
  %do
    (%dup __RGB) (%dup c) (%dup c) (%dup c)
  %dropping c

main (cin: 'ir_t15) (cout: (& Int32)): ('ir_t15 -> ((& Int32) -> ())) =
  %do
    %do
      let a: RGB = (%dup makeColor) 4
      %do
        let x: RGB = (%dup __RGB) ((%dup fib) 45) 5 5
        %do
          let __dupdrop_anon_underscore: Int32 =
            match x
              Black = { 5 }

              (RGB __anonymous_pattern __anonymous_pattern__1 __anonymous_pattern__2) =
                %do
                  %dup __anonymous_pattern
                  %do
                    %dup __anonymous_pattern__1
                    %do
                      %dup __anonymous_pattern__2
                      %dup __anonymous_pattern
                    %dropping __anonymous_pattern__2
                  %dropping __anonymous_pattern__1
                %dropping __anonymous_pattern
          %do
            let __dupdrop_anon_underscore__1: Int32 =
              match a
                Black = { 4 }

                (RGB __anonymous_pattern__3 __anonymous_pattern__4 __anonymous_pattern__5) =
                  %do
                    %dup __anonymous_pattern__3
                    %do
                      %dup __anonymous_pattern__4
                      %do
                        %dup __anonymous_pattern__5
                        let r1: Int32 = %dup __anonymous_pattern__3
                        %do
                          %dup r1 + %dup r1
                        %dropping r1
                      %dropping __anonymous_pattern__5
                    %dropping __anonymous_pattern__4
                  %dropping __anonymous_pattern__3
            %do
              let __dupdrop_anon_underscore__2: () = after 1, %dup cout <-  65
              %do
                let __dupdrop_anon_underscore__3: () = wait %dup cout
                %do
                  let __dupdrop_anon_underscore__4: () =
                    after 1, %dup cout <-  10
                  %do
                    wait %dup cout
                  %dropping __dupdrop_anon_underscore__4
                %dropping __dupdrop_anon_underscore__3
              %dropping __dupdrop_anon_underscore__2
            %dropping __dupdrop_anon_underscore__1
          %dropping __dupdrop_anon_underscore
        %dropping x
      %dropping a
    %dropping cout
  %dropping cin
*/