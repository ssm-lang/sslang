// incomplete big number library
// - integer to big num conversion 
// - big num printing complete
// - big num equality check
// - fixes numbers3.ssl by removes Nil from Number's ADT definition
// - TODO: successor function!

type Bool
    True
    False

type Digit
    Zero
    One
    Two
    Three
    Four
    Five
    Six
    Seven
    Eight
    Nine

type Number
    Nums Number Number
    Dig Digit

btos b : Bool -> Int =
    match b
          False = 70
          True = 84

dtoc (n : Digit) -> Int =
    match n
          Zero = 48
          One = 49
          Two = 50
          Three = 51
          Four = 52
          Five = 53
          Six = 54
          Seven = 55
          Eight = 56
          Nine = 57
          
          

eqZero n : Digit -> Bool =
    match n
          Zero = True
          _ = False

eqOne n : Digit -> Bool =
    match n
          One = True
          _ = False

eqTwo n : Digit -> Bool =
    match n
          Two = True
          _ = False

eqThree n : Digit -> Bool =
    match n
          Three = True
          _ = False

eqFour n : Digit -> Bool =
    match n
          Four = True
          _ = False

eqFive n : Digit -> Bool =
    match n
          Five = True
          _ = False

eqSix n : Digit -> Bool =
    match n
          Six = True
          _ = False

eqSeven n : Digit -> Bool =
    match n
          Seven = True
          _ = False    

eqEight n : Digit -> Bool =
    match n
          Eight = True
          _ = False

eqNine n : Digit -> Bool =
    match n
          Nine = True
          _ = False   

eqDigit (n : Digit) (n2 : Digit) -> Bool =
    match n
          Zero = eqZero n2
          One = eqOne n2
          Two = eqTwo n2
          Three = eqThree n2
          Four = eqFour n2
          Five = eqFive n2
          Six = eqSix n2
          Seven = eqSeven n2
          Eight = eqEight n2
          Nine = eqNine n2

itod (i :Int) -> Digit =
    match i
          0 = Zero
          1 = One
          2 = Two
          3 = Three
          4 = Four
          5 = Five
          6 = Six
          7 = Seven
          8 = Eight
          _ = Nine

itoNum (i : Int) -> Number =
    match (i > 10)
        0 = Dig (itod i)
        _ = let r = i % 10
            let q = i / 10
            Nums (itoNum q) (Dig (itod r))

printNum (cout : & Int) (n : Number) -> () =
    match n
      Dig dig = print cout (dtoc dig)
      Nums d tl = printNum cout d
                  printNum cout tl

eqNumber (n : Number) (n2 : Number) -> Bool =
    match n
      Dig d = match n2
                Dig d2 = eqDigit d d2
                _ = False
      Nums d tl = match n2
                    Nums d2 tl2 = match (eqNumber d d2)
                                    True = match (eqNumber tl tl2)
                                             True = True
                                             _ = False
                                    _ = False
                    _ = False    
     
print (cout : & Int) (c : Int) -> () =
    after 10 , (cout : & Int) <- c  
    wait (cout : & Int)

main (cint : & Int) ( cout : & Int ) -> () =
      let x = (Nums (Dig One) (Nums (Dig Nine) (Dig Nine)))   
      let y = (Nums (Dig Five) (Nums (Dig Five) (Dig Zero)))  
      print cout (btos (eqNumber  x x))
      print cout (btos (eqNumber x y))
      print cout 10
      printNum cout (Dig Nine)
      print cout 10
      printNum cout (itoNum 199)
      print cout 10
      printNum cout (itoNum 99)
      print cout 10
      printNum cout (itoNum 9)
      print cout 10
      printNum cout (itoNum 2199)
      print cout 10
      printNum cout y
      print cout 10
      